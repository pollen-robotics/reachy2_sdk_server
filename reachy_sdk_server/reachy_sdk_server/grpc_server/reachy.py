import os
from typing import Iterator

import grpc
import rclpy
import reachy2_monitoring as rm
import reachy2_sdk_api
from control_msgs.msg import DynamicJointState
from google.protobuf.empty_pb2 import Empty
from reachy2_sdk_api.part_pb2 import PartId
from reachy2_sdk_api.reachy_pb2 import (
    Reachy,
    ReachyComponentsCommands,
    ReachyCoreMode,
    ReachyId,
    ReachyInfo,
    ReachyState,
    ReachyStatus,
    ReachyStreamAuditRequest,
    ReachyStreamStateRequest,
)
from reachy2_sdk_api.reachy_pb2_grpc import add_ReachyServiceServicer_to_server
from reachy_config import ReachyConfig

from ..abstract_bridge_node import AbstractBridgeNode
from ..utils import endless_timer_get_stream, endless_timer_get_stream_works, get_current_timestamp
from .arm import ArmServicer
from .hand import HandServicer
from .head import HeadServicer
from .mobile_base import MobileBaseServicer
from .tripod import TripodServicer


class ReachyServicer:
    def __init__(
        self,
        bridge_node: AbstractBridgeNode,
        logger: rclpy.impl.rcutils_logger.RcutilsLogger,
        arm_servicer: ArmServicer,
        hand_servicer: HandServicer,
        head_servicer: HeadServicer,
        mobile_base_servicer: MobileBaseServicer,
        tripod_servicer: TripodServicer,
        reachy_config: dict = {},
        core_mode: ReachyCoreMode = ReachyCoreMode.FAKE,
    ):
        self.bridge_node = bridge_node
        self.logger = logger

        self.arm_servicer = arm_servicer
        self.hand_servicer = hand_servicer
        self.head_servicer = head_servicer
        self.mobile_base_servicer = mobile_base_servicer
        self.tripod_servicer = tripod_servicer
        self.core_mode = core_mode
        self.reachy_config = reachy_config
        self.reachy_id = ReachyId(id=1, name="reachy")

    def register_to_server(self, server: grpc.Server):
        self.logger.info("Registering 'ArmServiceServicer' to server.")
        add_ReachyServiceServicer_to_server(self, server)

    def GetReachy(self, request: Empty, context: grpc.ServicerContext) -> Reachy:
        with rm.PollenSpan(
            tracer=self.bridge_node.tracer, trace_name="GetReachy", kind=rm.trace.SpanKind.INTERNAL, context=rm.otel_rootctx
        ):
            params = {
                "id": self.reachy_id,
            }

            for p in self.bridge_node.parts:
                if p.type == "arm":
                    with rm.PollenSpan(tracer=self.bridge_node.tracer, trace_name=f"GetReachy::type=arm"):
                        params[p.name] = self.arm_servicer.get_arm(p, context)
                elif p.type == "head":
                    with rm.PollenSpan(tracer=self.bridge_node.tracer, trace_name=f"GetReachy::type=head"):
                        params[p.name] = self.head_servicer.get_head(p, context)
                elif p.type == "hand":
                    with rm.PollenSpan(tracer=self.bridge_node.tracer, trace_name=f"GetReachy::type=hand"):
                        params[p.name] = self.hand_servicer.get_hand(p, context)
                elif p.type == "mobile_base":
                    with rm.PollenSpan(tracer=self.bridge_node.tracer, trace_name=f"GetReachy::type=mobile_base"):
                        params[p.name] = self.mobile_base_servicer.get_mobile_base(p, context)
                elif p.type == "tripod":
                    with rm.PollenSpan(tracer=self.bridge_node.tracer, trace_name=f"GetReachy::type=tripod"):
                        params[p.name] = self.tripod_servicer.get_tripod(p, context)

            params["info"] = ReachyInfo(
                serial_number=str(self.reachy_config["serial_number"]),
                version_soft=os.getenv("IMAGE_VERSION_TAG", ""),
                api_version=reachy2_sdk_api.__version__,
                core_mode=self.core_mode,
            )

        return Reachy(**params)

    def GetReachyState(self, request: ReachyId, context: grpc.ServicerContext) -> ReachyState:
        # NOTE: this spans are generated by StreamReachy but in order to link them to that span
        # it seems to grow recursively (each one depends on StreamReachy + the previous GetReachyState)
        # span_links = rm.span_links(rm.first_span("GetReachyState"))
        # print('span_links', [x.context for x in span_links[:3]])
        with rm.PollenSpan(
            tracer=self.bridge_node.tracer,
            trace_name=f"GetReachyState",
            kind=rm.trace.SpanKind.INTERNAL,
            context=rm.otel_rootctx,
        ):
            # span.add_link(rm.first_span("GetReachyState").get_span_context()) # see NOTE above
            with self.bridge_node.sum_getreachystate.time():
                if request.id != self.reachy_id.id and request.name != self.reachy_id.name:
                    context.abort(grpc.StatusCode.NOT_FOUND, "Reachy not found.")

                params = {
                    "timestamp": get_current_timestamp(self.bridge_node),
                    "id": self.reachy_id,
                }

                for p in self.bridge_node.parts:
                    if p.type == "arm":
                        with rm.PollenSpan(tracer=self.bridge_node.tracer, trace_name=f"GetReachyState::type=arm"):
                            params[f"{p.name}_state"] = self.arm_servicer.GetState(PartId(id=p.id), context)
                    elif p.type == "head":
                        with rm.PollenSpan(tracer=self.bridge_node.tracer, trace_name=f"GetReachyState::type=head"):
                            params[f"{p.name}_state"] = self.head_servicer.GetState(PartId(id=p.id), context)
                    elif p.type == "hand":
                        with rm.PollenSpan(tracer=self.bridge_node.tracer, trace_name=f"GetReachyState::type=hand"):
                            params[f"{p.name}_state"] = self.hand_servicer.GetState(PartId(id=p.id), context)
                    elif p.type == "mobile_base":
                        with rm.PollenSpan(tracer=self.bridge_node.tracer, trace_name=f"GetReachyState::type=mobile_base"):
                            params[f"{p.name}_state"] = self.mobile_base_servicer.GetState(PartId(id=p.id), context)
                    elif p.type == "tripod":
                        with rm.PollenSpan(tracer=self.bridge_node.tracer, trace_name=f"GetReachyState::type=tripod"):
                            params[f"{p.name}_state"] = self.tripod_servicer.GetState(PartId(id=p.id), context)

        return ReachyState(**params)

    def StreamReachyState(self, request: ReachyStreamStateRequest, context: grpc.ServicerContext) -> Iterator[ReachyState]:
        return endless_timer_get_stream_works(
            self.bridge_node,
            self.GetReachyState,
            request.id,
            context,
            1 / request.publish_frequency,
        )

    def Audit(self, request: ReachyId, context: grpc.ServicerContext) -> ReachyStatus:
        with rm.PollenSpan(
            tracer=self.bridge_node.tracer, trace_name=f"Audit", kind=rm.trace.SpanKind.INTERNAL, context=rm.otel_rootctx
        ):
            if request.id != self.reachy_id.id and request.name != self.reachy_id.name:
                context.abort(grpc.StatusCode.NOT_FOUND, "Reachy not found.")

            params = {
                "timestamp": get_current_timestamp(self.bridge_node),
                "id": self.reachy_id,
            }

            for p in self.bridge_node.parts:
                if p.type == "arm":
                    with rm.PollenSpan(tracer=self.bridge_node.tracer, trace_name=f"Audit::type=arm"):
                        params[f"{p.name}_status"] = self.arm_servicer.Audit(PartId(id=p.id), context)
                elif p.type == "head":
                    with rm.PollenSpan(tracer=self.bridge_node.tracer, trace_name=f"Audit::type=head"):
                        params[f"{p.name}_status"] = self.head_servicer.Audit(PartId(id=p.id), context)
                elif p.type == "hand":
                    with rm.PollenSpan(tracer=self.bridge_node.tracer, trace_name=f"Audit::type=hand"):
                        params[f"{p.name}_status"] = self.hand_servicer.Audit(PartId(id=p.id), context)
                elif p.type == "mobile_base":
                    with rm.PollenSpan(tracer=self.bridge_node.tracer, trace_name=f"Audit::type=mobile_base"):
                        params[f"{p.name}_status"] = self.mobile_base_servicer.Audit(PartId(id=p.id), context)

        return ReachyStatus(**params)

    Audit.first_span = None

    def StreamAudit(self, request: ReachyStreamAuditRequest, context: grpc.ServicerContext) -> Iterator[ReachyStatus]:
        return endless_timer_get_stream_works(
            self.bridge_node,
            self.Audit,
            request.id,
            context,
            1 / request.publish_frequency,
        )

    def SendComponentsCommands(self, request: ReachyComponentsCommands, context: grpc.ServicerContext) -> Empty:
        cmd = DynamicJointState()
        cmd.joint_names = []
        if request.HasField("r_arm_commands"):
            r_arm_commands = self.arm_servicer.build_command(request.r_arm_commands, context)
            cmd.joint_names.extend(r_arm_commands.joint_names)
            cmd.interface_values.extend(r_arm_commands.interface_values)
        if request.HasField("l_arm_commands"):
            l_arm_commands = self.arm_servicer.build_command(request.l_arm_commands, context)
            cmd.joint_names.extend(l_arm_commands.joint_names)
            cmd.interface_values.extend(l_arm_commands.interface_values)
        if request.HasField("head_commands"):
            head_commands = self.head_servicer.build_command(request.head_commands, context)
            cmd.joint_names.extend(head_commands.joint_names)
            cmd.interface_values.extend(head_commands.interface_values)
        if request.HasField("r_hand_commands"):
            r_hand_commands = self.hand_servicer.build_command(request.r_hand_commands, context)
            cmd.joint_names.extend(r_hand_commands.joint_names)
            cmd.interface_values.extend(r_hand_commands.interface_values)
        if request.HasField("l_hand_commands"):
            l_hand_commands = self.hand_servicer.build_command(request.l_hand_commands, context)
            cmd.joint_names.extend(l_hand_commands.joint_names)
            cmd.interface_values.extend(l_hand_commands.interface_values)
        self.bridge_node.publish_command(cmd)
        return Empty()
